# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: List GITHUB_ACTOR env variable
        run: echo $GITHUB_ACTOR
      
      - name: List GITHUB_SHA env variable
        run: echo $GITHUB_SHA
      
      - name: Get commit message
        run: |
          msg="${{ github.event.head_commit.message }}"
          echo $msg
          
      - name: Print file
        run: cat 

      - name: curl to coda (list tables)
        run: curl --location 'https://coda.io/apis/v1/docs/LjcI0v6O0t/tables' --header "Authorization:Bearer ${{ secrets.CODA_API_KEY }}"
        
      - name: curl to coda (list table columns)
        run: curl --location https://coda.io/apis/v1/docs/LjcI0v6O0t/tables/grid-vUtbKxZSRl/columns --header "Authorization:Bearer ${{ secrets.CODA_API_KEY }}"
        
      - name: curl to coda (add row)
        env: 
          COMMIT_MESSAGE: ${{ toJson(github.event.head_commit.message) }}
        run: > 
              curl -s POST -H "Content-Type:application/json" -L 'https://coda.io/apis/v1/docs/LjcI0v6O0t/tables/grid-vUtbKxZSRl/rows' -H "Authorization:Bearer ${{ secrets.CODA_API_KEY }}"
              -d "{\"rows\": [{\"cells\": [{ \"column\": \"c-1Ho4EFibQf\", \"value\": \"$GITHUB_SHA\" }, { \"column\": \"c-t3bekyu8pv\", \"value\": \"$GITHUB_ACTOR\" }, { \"column\": \"c-EMoztRkUcW\", \"value\": \"$COMMIT_MESSAGE\" } ]}]}"   
              | jq 'if .statusMessage? == null then "Inserted 1 row" else . end' # => "Inserted 1 row"






